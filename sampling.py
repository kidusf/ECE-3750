# -*- coding: utf-8 -*-
"""FUN3_ReplicaDemo

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cz4ZLGeq_FDIHyX_aze_eFD7LeiI3Gnn

# Sampling and Aliasing demo
"""

import numpy as np
import matplotlib.pyplot as plt

fs = 100 # sampling frequency 
fin = 100 # maximum frequency of the input signal 
sigtype = 0 # 0 for triangle, 1 for deltas 

fmax = fs*1.5 # plot the FT of the sampled signal up to fmax Hz

# set-up our frequency variables 
df = 0.1 # spacing between frequency samples 
fmaxcalc = np.ceil(fmax/fs)*fs + fin # helpful in determining relevant replicas
freqs = np.arange(-fmaxcalc, fmaxcalc+df, df)
N = freqs.size # number of frequency samples
ind0 = int(N/2) # center index, i.e., freqs[ind0] = 0

# create an arbitrary baseband Xw - this represents the CTFT of some signal 
# of course, we can't store a full CT signal in our computers!
# so, this is a sampled version
Xw = np.zeros(N)
if sigtype == 0: # sig is the arbitrary triangle signal in the frequency domain  
  sig = np.concatenate((np.arange(0,1,df/fin), np.arange(1,0,-df/fin),[0]))
else: # or, you can set sig to be just a delta at fin 
  sig = np.concatenate(([1],np.zeros(int((fin/df) * 2)-1),[1]))
Xw[(ind0 - int(fin/df)):(ind0 + int(fin/df) + 1)] = sig

# plot the "continuous" FT of the signal before sampling 
fig, ax = plt.subplots(); ax.plot(freqs, Xw)
ax.set(xlabel='f (Hz)', ylabel='Amplitude', title='Before sampling')
ax.grid(); plt.xlim(-fmax, fmax)
#fig.savefig("test.png")
plt.show()

# now mimic what happens to the DFTF when we sample 
Xw = np.zeros(N) # start with a new array 
# loop over all the replicas within our frequency range 
for Ki in np.arange(-np.ceil(fmax/fs), np.ceil(fmax/fs)+1, 1):
  minind = ind0 + int(Ki*fs/df) - int(fin/df)
  maxind = ind0 + int(Ki*fs/df) + int(fin/df) 
  Xw[minind:maxind+1] += sig # insert a replica centered at Ki * fs

# plot the "continuous" FT of the signal after sampling 
fig, ax = plt.subplots()
ax.plot(freqs, Xw)
ax.set(xlabel='f (Hz)', ylabel='Amplitude', title='After sampling')
ax.grid(); plt.xlim(-fmax, fmax)
#fig.savefig("test.png")
plt.show()

# display a list of frequencies with non-zero magnitude 
# (only run this if using the delta function in frequency, not the triangle)
print(freqs[np.nonzero(Xw)])